datasource db {
    provider          = "mongodb"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("Accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("Sessions")
}

model User {
    id             String           @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    password       String?
    image          String?
    roles          Roles[]          @default([LEARNER])
    accounts       Account[]
    sessions       Session[]
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    Profile        Profile?
    navigationItemsCreated NavigationItem[] @relation("CreatedById")
    navigationItemsUpdated NavigationItem[] @relation("UpdatedById")

    @@unique([email, image])
    @@map("Users")
}

model Profile {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(fields: [userEmail, avatar], references: [email, image])
    userEmail String   @unique
    avatar    String
    firstname String
    lastname  String
    birthdate String
    country   String
    city      String
    address   String
    company   String
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userEmail, avatar])
    @@map("Profiles")
}

model NavigationItem {
    id             String           @id @default(auto()) @map("_id") @db.ObjectId
    label          String
    link           String
    icon           String?
    parent         NavigationItem?  @relation("ChildOf", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentId       String?          @db.ObjectId
    children       NavigationItem[] @relation("ChildOf")
    createdBy      User?            @relation(name: "CreatedById", fields: [createdById], references: [id])
    createdById    String           @db.ObjectId
    createdAt      DateTime         @default(now())
    updatedBy      User?            @relation(name: "UpdatedById", fields: [updatedById], references: [id])
    updatedById    String?          @db.ObjectId
    updatedAt      DateTime?        @updatedAt
    allowedUsers   String[]

    @@map("NavigationItems")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

enum Roles {
    LEARNER
    MANAGER
    ADMIN
}
